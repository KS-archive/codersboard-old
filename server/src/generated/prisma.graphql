# source: https://eu1.prisma.sh/coders-board/codersboard-server-dev/dev
# timestamp: Mon May 06 2019 23:50:02 GMT+0200 (Central European Summer Time)

enum Access {
  FONT_AWESOME
  FREEPIK
  GITHUB
}

type AggregateArea {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregatePostTag {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateSkill {
  count: Int!
}

type AggregateSuccess {
  count: Int!
}

type AggregateUniversity {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserArea {
  count: Int!
}

type AggregateUserProject {
  count: Int!
}

type AggregateUserSkill {
  count: Int!
}

type Area implements Node {
  id: ID!
  areaURL: String!
  name: String!
  icon: String!
  description: String!
  mainSlackChannel: String
  slackChannels: [String!]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AreaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AreaEdge]!
  aggregate: AggregateArea!
}

input AreaCreateInput {
  id: ID
  areaURL: String!
  name: String!
  icon: String!
  description: String!
  mainSlackChannel: String
  slackChannels: AreaCreateslackChannelsInput
  users: UserCreateManyInput
}

input AreaCreateOneInput {
  create: AreaCreateInput
  connect: AreaWhereUniqueInput
}

input AreaCreateslackChannelsInput {
  set: [String!]
}

"""An edge in a connection."""
type AreaEdge {
  """The item at the end of the edge."""
  node: Area!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AreaOrderByInput {
  id_ASC
  id_DESC
  areaURL_ASC
  areaURL_DESC
  name_ASC
  name_DESC
  icon_ASC
  icon_DESC
  description_ASC
  description_DESC
  mainSlackChannel_ASC
  mainSlackChannel_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AreaPreviousValues {
  id: ID!
  areaURL: String!
  name: String!
  icon: String!
  description: String!
  mainSlackChannel: String
  slackChannels: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AreaSubscriptionPayload {
  mutation: MutationType!
  node: Area
  updatedFields: [String!]
  previousValues: AreaPreviousValues
}

input AreaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AreaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AreaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AreaSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AreaWhereInput
}

input AreaUpdateDataInput {
  areaURL: String
  name: String
  icon: String
  description: String
  mainSlackChannel: String
  slackChannels: AreaUpdateslackChannelsInput
  users: UserUpdateManyInput
}

input AreaUpdateInput {
  areaURL: String
  name: String
  icon: String
  description: String
  mainSlackChannel: String
  slackChannels: AreaUpdateslackChannelsInput
  users: UserUpdateManyInput
}

input AreaUpdateManyMutationInput {
  areaURL: String
  name: String
  icon: String
  description: String
  mainSlackChannel: String
  slackChannels: AreaUpdateslackChannelsInput
}

input AreaUpdateOneInput {
  create: AreaCreateInput
  connect: AreaWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AreaUpdateDataInput
  upsert: AreaUpsertNestedInput
}

input AreaUpdateOneRequiredInput {
  create: AreaCreateInput
  connect: AreaWhereUniqueInput
  update: AreaUpdateDataInput
  upsert: AreaUpsertNestedInput
}

input AreaUpdateslackChannelsInput {
  set: [String!]
}

input AreaUpsertNestedInput {
  update: AreaUpdateDataInput!
  create: AreaCreateInput!
}

input AreaWhereInput {
  """Logical AND on all given filters."""
  AND: [AreaWhereInput!]

  """Logical OR on all given filters."""
  OR: [AreaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AreaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  areaURL: String

  """All values that are not equal to given value."""
  areaURL_not: String

  """All values that are contained in given list."""
  areaURL_in: [String!]

  """All values that are not contained in given list."""
  areaURL_not_in: [String!]

  """All values less than the given value."""
  areaURL_lt: String

  """All values less than or equal the given value."""
  areaURL_lte: String

  """All values greater than the given value."""
  areaURL_gt: String

  """All values greater than or equal the given value."""
  areaURL_gte: String

  """All values containing the given string."""
  areaURL_contains: String

  """All values not containing the given string."""
  areaURL_not_contains: String

  """All values starting with the given string."""
  areaURL_starts_with: String

  """All values not starting with the given string."""
  areaURL_not_starts_with: String

  """All values ending with the given string."""
  areaURL_ends_with: String

  """All values not ending with the given string."""
  areaURL_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  icon: String

  """All values that are not equal to given value."""
  icon_not: String

  """All values that are contained in given list."""
  icon_in: [String!]

  """All values that are not contained in given list."""
  icon_not_in: [String!]

  """All values less than the given value."""
  icon_lt: String

  """All values less than or equal the given value."""
  icon_lte: String

  """All values greater than the given value."""
  icon_gt: String

  """All values greater than or equal the given value."""
  icon_gte: String

  """All values containing the given string."""
  icon_contains: String

  """All values not containing the given string."""
  icon_not_contains: String

  """All values starting with the given string."""
  icon_starts_with: String

  """All values not starting with the given string."""
  icon_not_starts_with: String

  """All values ending with the given string."""
  icon_ends_with: String

  """All values not ending with the given string."""
  icon_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  mainSlackChannel: String

  """All values that are not equal to given value."""
  mainSlackChannel_not: String

  """All values that are contained in given list."""
  mainSlackChannel_in: [String!]

  """All values that are not contained in given list."""
  mainSlackChannel_not_in: [String!]

  """All values less than the given value."""
  mainSlackChannel_lt: String

  """All values less than or equal the given value."""
  mainSlackChannel_lte: String

  """All values greater than the given value."""
  mainSlackChannel_gt: String

  """All values greater than or equal the given value."""
  mainSlackChannel_gte: String

  """All values containing the given string."""
  mainSlackChannel_contains: String

  """All values not containing the given string."""
  mainSlackChannel_not_contains: String

  """All values starting with the given string."""
  mainSlackChannel_starts_with: String

  """All values not starting with the given string."""
  mainSlackChannel_not_starts_with: String

  """All values ending with the given string."""
  mainSlackChannel_ends_with: String

  """All values not ending with the given string."""
  mainSlackChannel_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input AreaWhereUniqueInput {
  id: ID
  areaURL: String
  name: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Event implements Node {
  id: ID!
  name: String!
  description: String
  date: DateTime!
  image: String
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  type: EventType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  name: String!
  description: String
  date: DateTime!
  image: String
  type: EventType!
  participants: UserCreateManyInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  date_ASC
  date_DESC
  image_ASC
  image_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EventPreviousValues {
  id: ID!
  name: String!
  description: String
  date: DateTime!
  image: String
  type: EventType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

enum EventType {
  OPEN
  PRIVATE
  PROJECT_MEETING
  AREA_MEETING
  OTHER
}

input EventUpdateInput {
  name: String
  description: String
  date: DateTime
  image: String
  type: EventType
  participants: UserUpdateManyInput
}

input EventUpdateManyMutationInput {
  name: String
  description: String
  date: DateTime
  image: String
  type: EventType
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  type: EventType

  """All values that are not equal to given value."""
  type_not: EventType

  """All values that are contained in given list."""
  type_in: [EventType!]

  """All values that are not contained in given list."""
  type_not_in: [EventType!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

enum Institution {
  NONE
  UE_ORGANIZATION
  PWR_ORGANIZATION
  ASSOCIATION
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

enum MainPermission {
  OWNER
  ADMIN
  MEMBER
  TRAINEE
  HR
  FINANCE
  DATA
}

type Mutation {
  createUniversity(data: UniversityCreateInput!): University!
  createUserSkill(data: UserSkillCreateInput!): UserSkill!
  createSuccess(data: SuccessCreateInput!): Success!
  createUserProject(data: UserProjectCreateInput!): UserProject!
  createUserArea(data: UserAreaCreateInput!): UserArea!
  createEvent(data: EventCreateInput!): Event!
  createPost(data: PostCreateInput!): Post!
  createPostTag(data: PostTagCreateInput!): PostTag!
  createSkill(data: SkillCreateInput!): Skill!
  createProject(data: ProjectCreateInput!): Project!
  createArea(data: AreaCreateInput!): Area!
  createUser(data: UserCreateInput!): User!
  updateUniversity(data: UniversityUpdateInput!, where: UniversityWhereUniqueInput!): University
  updateUserSkill(data: UserSkillUpdateInput!, where: UserSkillWhereUniqueInput!): UserSkill
  updateSuccess(data: SuccessUpdateInput!, where: SuccessWhereUniqueInput!): Success
  updateUserProject(data: UserProjectUpdateInput!, where: UserProjectWhereUniqueInput!): UserProject
  updateUserArea(data: UserAreaUpdateInput!, where: UserAreaWhereUniqueInput!): UserArea
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updatePostTag(data: PostTagUpdateInput!, where: PostTagWhereUniqueInput!): PostTag
  updateSkill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateArea(data: AreaUpdateInput!, where: AreaWhereUniqueInput!): Area
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUniversity(where: UniversityWhereUniqueInput!): University
  deleteUserSkill(where: UserSkillWhereUniqueInput!): UserSkill
  deleteSuccess(where: SuccessWhereUniqueInput!): Success
  deleteUserProject(where: UserProjectWhereUniqueInput!): UserProject
  deleteUserArea(where: UserAreaWhereUniqueInput!): UserArea
  deleteEvent(where: EventWhereUniqueInput!): Event
  deletePost(where: PostWhereUniqueInput!): Post
  deletePostTag(where: PostTagWhereUniqueInput!): PostTag
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteArea(where: AreaWhereUniqueInput!): Area
  deleteUser(where: UserWhereUniqueInput!): User
  upsertUniversity(where: UniversityWhereUniqueInput!, create: UniversityCreateInput!, update: UniversityUpdateInput!): University!
  upsertUserSkill(where: UserSkillWhereUniqueInput!, create: UserSkillCreateInput!, update: UserSkillUpdateInput!): UserSkill!
  upsertSuccess(where: SuccessWhereUniqueInput!, create: SuccessCreateInput!, update: SuccessUpdateInput!): Success!
  upsertUserProject(where: UserProjectWhereUniqueInput!, create: UserProjectCreateInput!, update: UserProjectUpdateInput!): UserProject!
  upsertUserArea(where: UserAreaWhereUniqueInput!, create: UserAreaCreateInput!, update: UserAreaUpdateInput!): UserArea!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertPostTag(where: PostTagWhereUniqueInput!, create: PostTagCreateInput!, update: PostTagUpdateInput!): PostTag!
  upsertSkill(where: SkillWhereUniqueInput!, create: SkillCreateInput!, update: SkillUpdateInput!): Skill!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertArea(where: AreaWhereUniqueInput!, create: AreaCreateInput!, update: AreaUpdateInput!): Area!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyUniversities(data: UniversityUpdateManyMutationInput!, where: UniversityWhereInput): BatchPayload!
  updateManyUserSkills(data: UserSkillUpdateManyMutationInput!, where: UserSkillWhereInput): BatchPayload!
  updateManySuccesses(data: SuccessUpdateManyMutationInput!, where: SuccessWhereInput): BatchPayload!
  updateManyUserProjects(data: UserProjectUpdateManyMutationInput!, where: UserProjectWhereInput): BatchPayload!
  updateManyUserAreas(data: UserAreaUpdateManyMutationInput!, where: UserAreaWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyPostTags(data: PostTagUpdateManyMutationInput!, where: PostTagWhereInput): BatchPayload!
  updateManySkills(data: SkillUpdateManyMutationInput!, where: SkillWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyAreas(data: AreaUpdateManyMutationInput!, where: AreaWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyUniversities(where: UniversityWhereInput): BatchPayload!
  deleteManyUserSkills(where: UserSkillWhereInput): BatchPayload!
  deleteManySuccesses(where: SuccessWhereInput): BatchPayload!
  deleteManyUserProjects(where: UserProjectWhereInput): BatchPayload!
  deleteManyUserAreas(where: UserAreaWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyPostTags(where: PostTagWhereInput): BatchPayload!
  deleteManySkills(where: SkillWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyAreas(where: AreaWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

type Post implements Node {
  id: ID!
  title: String!
  content: String!
  tags(where: PostTagWhereInput, orderBy: PostTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PostTag!]
  date: DateTime!
  area: Area
  project: Project
  user: User!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  content: String!
  tags: PostTagCreateManyInput
  area: AreaCreateOneInput
  project: ProjectCreateOneInput
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  date_ASC
  date_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  content: String!
  date: DateTime!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

type PostTag implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type PostTagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostTagEdge]!
  aggregate: AggregatePostTag!
}

input PostTagCreateInput {
  id: ID
  name: String!
}

input PostTagCreateManyInput {
  create: [PostTagCreateInput!]
  connect: [PostTagWhereUniqueInput!]
}

"""An edge in a connection."""
type PostTagEdge {
  """The item at the end of the edge."""
  node: PostTag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostTagOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type PostTagPreviousValues {
  id: ID!
  name: String!
}

input PostTagScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PostTagScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostTagScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostTagScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type PostTagSubscriptionPayload {
  mutation: MutationType!
  node: PostTag
  updatedFields: [String!]
  previousValues: PostTagPreviousValues
}

input PostTagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostTagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostTagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostTagSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostTagWhereInput
}

input PostTagUpdateDataInput {
  name: String
}

input PostTagUpdateInput {
  name: String
}

input PostTagUpdateManyDataInput {
  name: String
}

input PostTagUpdateManyInput {
  create: [PostTagCreateInput!]
  connect: [PostTagWhereUniqueInput!]
  set: [PostTagWhereUniqueInput!]
  disconnect: [PostTagWhereUniqueInput!]
  delete: [PostTagWhereUniqueInput!]
  update: [PostTagUpdateWithWhereUniqueNestedInput!]
  updateMany: [PostTagUpdateManyWithWhereNestedInput!]
  deleteMany: [PostTagScalarWhereInput!]
  upsert: [PostTagUpsertWithWhereUniqueNestedInput!]
}

input PostTagUpdateManyMutationInput {
  name: String
}

input PostTagUpdateManyWithWhereNestedInput {
  where: PostTagScalarWhereInput!
  data: PostTagUpdateManyDataInput!
}

input PostTagUpdateWithWhereUniqueNestedInput {
  where: PostTagWhereUniqueInput!
  data: PostTagUpdateDataInput!
}

input PostTagUpsertWithWhereUniqueNestedInput {
  where: PostTagWhereUniqueInput!
  update: PostTagUpdateDataInput!
  create: PostTagCreateInput!
}

input PostTagWhereInput {
  """Logical AND on all given filters."""
  AND: [PostTagWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostTagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostTagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input PostTagWhereUniqueInput {
  id: ID
}

input PostUpdateInput {
  title: String
  content: String
  tags: PostTagUpdateManyInput
  area: AreaUpdateOneInput
  project: ProjectUpdateOneInput
  user: UserUpdateOneRequiredInput
}

input PostUpdateManyMutationInput {
  title: String
  content: String
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  tags_every: PostTagWhereInput
  tags_some: PostTagWhereInput
  tags_none: PostTagWhereInput
  area: AreaWhereInput
  project: ProjectWhereInput
  user: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Project implements Node {
  id: ID!
  projectURL: String!
  name: String!
  description: String!
  image: String!
  gallery: [String!]!
  startDate: DateTime
  finishDate: DateTime
  type: ProjectType!
  status: ProjectStatus!
  mainSlackChannel: String
  slackChannels: [String!]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreategalleryInput {
  set: [String!]
}

input ProjectCreateInput {
  id: ID
  projectURL: String!
  name: String!
  description: String!
  image: String!
  startDate: DateTime
  finishDate: DateTime
  type: ProjectType!
  status: ProjectStatus!
  mainSlackChannel: String
  gallery: ProjectCreategalleryInput
  slackChannels: ProjectCreateslackChannelsInput
  users: UserCreateManyInput
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateslackChannelsInput {
  set: [String!]
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  projectURL_ASC
  projectURL_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  startDate_ASC
  startDate_DESC
  finishDate_ASC
  finishDate_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  mainSlackChannel_ASC
  mainSlackChannel_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  projectURL: String!
  name: String!
  description: String!
  image: String!
  gallery: [String!]!
  startDate: DateTime
  finishDate: DateTime
  type: ProjectType!
  status: ProjectStatus!
  mainSlackChannel: String
  slackChannels: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ProjectStatus {
  DRAFT
  STARTING
  IN_PROGRESS
  CANCELLED
  DONE
  SUSPENDED
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

enum ProjectType {
  SOFTWARE
  WEBSITE
  EVENT
  OTHER
}

input ProjectUpdateDataInput {
  projectURL: String
  name: String
  description: String
  image: String
  startDate: DateTime
  finishDate: DateTime
  type: ProjectType
  status: ProjectStatus
  mainSlackChannel: String
  gallery: ProjectUpdategalleryInput
  slackChannels: ProjectUpdateslackChannelsInput
  users: UserUpdateManyInput
}

input ProjectUpdategalleryInput {
  set: [String!]
}

input ProjectUpdateInput {
  projectURL: String
  name: String
  description: String
  image: String
  startDate: DateTime
  finishDate: DateTime
  type: ProjectType
  status: ProjectStatus
  mainSlackChannel: String
  gallery: ProjectUpdategalleryInput
  slackChannels: ProjectUpdateslackChannelsInput
  users: UserUpdateManyInput
}

input ProjectUpdateManyMutationInput {
  projectURL: String
  name: String
  description: String
  image: String
  startDate: DateTime
  finishDate: DateTime
  type: ProjectType
  status: ProjectStatus
  mainSlackChannel: String
  gallery: ProjectUpdategalleryInput
  slackChannels: ProjectUpdateslackChannelsInput
}

input ProjectUpdateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
}

input ProjectUpdateOneRequiredInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
}

input ProjectUpdateslackChannelsInput {
  set: [String!]
}

input ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  projectURL: String

  """All values that are not equal to given value."""
  projectURL_not: String

  """All values that are contained in given list."""
  projectURL_in: [String!]

  """All values that are not contained in given list."""
  projectURL_not_in: [String!]

  """All values less than the given value."""
  projectURL_lt: String

  """All values less than or equal the given value."""
  projectURL_lte: String

  """All values greater than the given value."""
  projectURL_gt: String

  """All values greater than or equal the given value."""
  projectURL_gte: String

  """All values containing the given string."""
  projectURL_contains: String

  """All values not containing the given string."""
  projectURL_not_contains: String

  """All values starting with the given string."""
  projectURL_starts_with: String

  """All values not starting with the given string."""
  projectURL_not_starts_with: String

  """All values ending with the given string."""
  projectURL_ends_with: String

  """All values not ending with the given string."""
  projectURL_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  finishDate: DateTime

  """All values that are not equal to given value."""
  finishDate_not: DateTime

  """All values that are contained in given list."""
  finishDate_in: [DateTime!]

  """All values that are not contained in given list."""
  finishDate_not_in: [DateTime!]

  """All values less than the given value."""
  finishDate_lt: DateTime

  """All values less than or equal the given value."""
  finishDate_lte: DateTime

  """All values greater than the given value."""
  finishDate_gt: DateTime

  """All values greater than or equal the given value."""
  finishDate_gte: DateTime
  type: ProjectType

  """All values that are not equal to given value."""
  type_not: ProjectType

  """All values that are contained in given list."""
  type_in: [ProjectType!]

  """All values that are not contained in given list."""
  type_not_in: [ProjectType!]
  status: ProjectStatus

  """All values that are not equal to given value."""
  status_not: ProjectStatus

  """All values that are contained in given list."""
  status_in: [ProjectStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ProjectStatus!]
  mainSlackChannel: String

  """All values that are not equal to given value."""
  mainSlackChannel_not: String

  """All values that are contained in given list."""
  mainSlackChannel_in: [String!]

  """All values that are not contained in given list."""
  mainSlackChannel_not_in: [String!]

  """All values less than the given value."""
  mainSlackChannel_lt: String

  """All values less than or equal the given value."""
  mainSlackChannel_lte: String

  """All values greater than the given value."""
  mainSlackChannel_gt: String

  """All values greater than or equal the given value."""
  mainSlackChannel_gte: String

  """All values containing the given string."""
  mainSlackChannel_contains: String

  """All values not containing the given string."""
  mainSlackChannel_not_contains: String

  """All values starting with the given string."""
  mainSlackChannel_starts_with: String

  """All values not starting with the given string."""
  mainSlackChannel_not_starts_with: String

  """All values ending with the given string."""
  mainSlackChannel_ends_with: String

  """All values not ending with the given string."""
  mainSlackChannel_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
  projectURL: String
  name: String
}

type Query {
  universities(where: UniversityWhereInput, orderBy: UniversityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [University]!
  userSkills(where: UserSkillWhereInput, orderBy: UserSkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserSkill]!
  successes(where: SuccessWhereInput, orderBy: SuccessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Success]!
  userProjects(where: UserProjectWhereInput, orderBy: UserProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserProject]!
  userAreas(where: UserAreaWhereInput, orderBy: UserAreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserArea]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postTags(where: PostTagWhereInput, orderBy: PostTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PostTag]!
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  areas(where: AreaWhereInput, orderBy: AreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Area]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  university(where: UniversityWhereUniqueInput!): University
  userSkill(where: UserSkillWhereUniqueInput!): UserSkill
  success(where: SuccessWhereUniqueInput!): Success
  userProject(where: UserProjectWhereUniqueInput!): UserProject
  userArea(where: UserAreaWhereUniqueInput!): UserArea
  event(where: EventWhereUniqueInput!): Event
  post(where: PostWhereUniqueInput!): Post
  postTag(where: PostTagWhereUniqueInput!): PostTag
  skill(where: SkillWhereUniqueInput!): Skill
  project(where: ProjectWhereUniqueInput!): Project
  area(where: AreaWhereUniqueInput!): Area
  user(where: UserWhereUniqueInput!): User
  universitiesConnection(where: UniversityWhereInput, orderBy: UniversityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UniversityConnection!
  userSkillsConnection(where: UserSkillWhereInput, orderBy: UserSkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserSkillConnection!
  successesConnection(where: SuccessWhereInput, orderBy: SuccessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SuccessConnection!
  userProjectsConnection(where: UserProjectWhereInput, orderBy: UserProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserProjectConnection!
  userAreasConnection(where: UserAreaWhereInput, orderBy: UserAreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserAreaConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  postTagsConnection(where: PostTagWhereInput, orderBy: PostTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostTagConnection!
  skillsConnection(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SkillConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  areasConnection(where: AreaWhereInput, orderBy: AreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AreaConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Skill implements Node {
  id: ID!
  name: String!
  icon: String
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SkillConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SkillEdge]!
  aggregate: AggregateSkill!
}

input SkillCreateInput {
  id: ID
  name: String!
  icon: String
  users: UserCreateManyInput
}

input SkillCreateOneInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
}

"""An edge in a connection."""
type SkillEdge {
  """The item at the end of the edge."""
  node: Skill!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SkillOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  icon_ASC
  icon_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SkillPreviousValues {
  id: ID!
  name: String!
  icon: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SkillSubscriptionPayload {
  mutation: MutationType!
  node: Skill
  updatedFields: [String!]
  previousValues: SkillPreviousValues
}

input SkillSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SkillSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SkillSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SkillSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SkillWhereInput
}

input SkillUpdateDataInput {
  name: String
  icon: String
  users: UserUpdateManyInput
}

input SkillUpdateInput {
  name: String
  icon: String
  users: UserUpdateManyInput
}

input SkillUpdateManyMutationInput {
  name: String
  icon: String
}

input SkillUpdateOneRequiredInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
  update: SkillUpdateDataInput
  upsert: SkillUpsertNestedInput
}

input SkillUpsertNestedInput {
  update: SkillUpdateDataInput!
  create: SkillCreateInput!
}

input SkillWhereInput {
  """Logical AND on all given filters."""
  AND: [SkillWhereInput!]

  """Logical OR on all given filters."""
  OR: [SkillWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SkillWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  icon: String

  """All values that are not equal to given value."""
  icon_not: String

  """All values that are contained in given list."""
  icon_in: [String!]

  """All values that are not contained in given list."""
  icon_not_in: [String!]

  """All values less than the given value."""
  icon_lt: String

  """All values less than or equal the given value."""
  icon_lte: String

  """All values greater than the given value."""
  icon_gt: String

  """All values greater than or equal the given value."""
  icon_gte: String

  """All values containing the given string."""
  icon_contains: String

  """All values not containing the given string."""
  icon_not_contains: String

  """All values starting with the given string."""
  icon_starts_with: String

  """All values not starting with the given string."""
  icon_not_starts_with: String

  """All values ending with the given string."""
  icon_ends_with: String

  """All values not ending with the given string."""
  icon_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input SkillWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  university(where: UniversitySubscriptionWhereInput): UniversitySubscriptionPayload
  userSkill(where: UserSkillSubscriptionWhereInput): UserSkillSubscriptionPayload
  success(where: SuccessSubscriptionWhereInput): SuccessSubscriptionPayload
  userProject(where: UserProjectSubscriptionWhereInput): UserProjectSubscriptionPayload
  userArea(where: UserAreaSubscriptionWhereInput): UserAreaSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  postTag(where: PostTagSubscriptionWhereInput): PostTagSubscriptionPayload
  skill(where: SkillSubscriptionWhereInput): SkillSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  area(where: AreaSubscriptionWhereInput): AreaSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Success implements Node {
  id: ID!
  name: String!
  description: String!
  date: DateTime!
  type: SuccessType!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  project: Project
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SuccessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SuccessEdge]!
  aggregate: AggregateSuccess!
}

input SuccessCreateInput {
  id: ID
  name: String!
  description: String!
  date: DateTime!
  type: SuccessType!
  users: UserCreateManyInput
  project: ProjectCreateOneInput
}

"""An edge in a connection."""
type SuccessEdge {
  """The item at the end of the edge."""
  node: Success!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SuccessOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  date_ASC
  date_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SuccessPreviousValues {
  id: ID!
  name: String!
  description: String!
  date: DateTime!
  type: SuccessType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SuccessSubscriptionPayload {
  mutation: MutationType!
  node: Success
  updatedFields: [String!]
  previousValues: SuccessPreviousValues
}

input SuccessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SuccessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuccessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuccessSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SuccessWhereInput
}

enum SuccessType {
  EPIC
  SMALL
  NEWS
}

input SuccessUpdateInput {
  name: String
  description: String
  date: DateTime
  type: SuccessType
  users: UserUpdateManyInput
  project: ProjectUpdateOneInput
}

input SuccessUpdateManyMutationInput {
  name: String
  description: String
  date: DateTime
  type: SuccessType
}

input SuccessWhereInput {
  """Logical AND on all given filters."""
  AND: [SuccessWhereInput!]

  """Logical OR on all given filters."""
  OR: [SuccessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SuccessWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  type: SuccessType

  """All values that are not equal to given value."""
  type_not: SuccessType

  """All values that are contained in given list."""
  type_in: [SuccessType!]

  """All values that are not contained in given list."""
  type_not_in: [SuccessType!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  project: ProjectWhereInput
}

input SuccessWhereUniqueInput {
  id: ID
}

type University implements Node {
  id: ID!
  name: String!
  image: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UniversityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UniversityEdge]!
  aggregate: AggregateUniversity!
}

input UniversityCreateInput {
  id: ID
  name: String!
  image: String!
  users: UserCreateManyWithoutUniversityInput
}

input UniversityCreateOneWithoutUsersInput {
  create: UniversityCreateWithoutUsersInput
  connect: UniversityWhereUniqueInput
}

input UniversityCreateWithoutUsersInput {
  id: ID
  name: String!
  image: String!
}

"""An edge in a connection."""
type UniversityEdge {
  """The item at the end of the edge."""
  node: University!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UniversityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UniversityPreviousValues {
  id: ID!
  name: String!
  image: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UniversitySubscriptionPayload {
  mutation: MutationType!
  node: University
  updatedFields: [String!]
  previousValues: UniversityPreviousValues
}

input UniversitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UniversitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UniversitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UniversitySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UniversityWhereInput
}

input UniversityUpdateInput {
  name: String
  image: String
  users: UserUpdateManyWithoutUniversityInput
}

input UniversityUpdateManyMutationInput {
  name: String
  image: String
}

input UniversityUpdateOneWithoutUsersInput {
  create: UniversityCreateWithoutUsersInput
  connect: UniversityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UniversityUpdateWithoutUsersDataInput
  upsert: UniversityUpsertWithoutUsersInput
}

input UniversityUpdateWithoutUsersDataInput {
  name: String
  image: String
}

input UniversityUpsertWithoutUsersInput {
  update: UniversityUpdateWithoutUsersDataInput!
  create: UniversityCreateWithoutUsersInput!
}

input UniversityWhereInput {
  """Logical AND on all given filters."""
  AND: [UniversityWhereInput!]

  """Logical OR on all given filters."""
  OR: [UniversityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UniversityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input UniversityWhereUniqueInput {
  id: ID
  name: String
}

type User implements Node {
  id: ID!
  fullName: String!
  profileURL: String!
  image: String!
  email: String!
  companyEmail: String
  phone: String
  password: String!
  role: String!
  areas(where: UserAreaWhereInput, orderBy: UserAreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserArea!]
  skills(where: UserSkillWhereInput, orderBy: UserSkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserSkill!]
  projects(where: UserProjectWhereInput, orderBy: UserProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserProject!]
  permissions: [MainPermission!]!
  university: University
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  institution: [Institution!]!
  slackId: String
  accesses: [Access!]!
  special: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserArea implements Node {
  id: ID!
  user: User!
  area: Area!
  role: String
  responsibilities: String
  permissions: Permission!
}

"""A connection to a list of items."""
type UserAreaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserAreaEdge]!
  aggregate: AggregateUserArea!
}

input UserAreaCreateInput {
  id: ID
  role: String
  responsibilities: String
  permissions: Permission!
  user: UserCreateOneWithoutAreasInput!
  area: AreaCreateOneInput!
}

input UserAreaCreateManyWithoutUserInput {
  create: [UserAreaCreateWithoutUserInput!]
  connect: [UserAreaWhereUniqueInput!]
}

input UserAreaCreateWithoutUserInput {
  id: ID
  role: String
  responsibilities: String
  permissions: Permission!
  area: AreaCreateOneInput!
}

"""An edge in a connection."""
type UserAreaEdge {
  """The item at the end of the edge."""
  node: UserArea!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserAreaOrderByInput {
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  responsibilities_ASC
  responsibilities_DESC
  permissions_ASC
  permissions_DESC
}

type UserAreaPreviousValues {
  id: ID!
  role: String
  responsibilities: String
  permissions: Permission!
}

input UserAreaScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAreaScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAreaScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAreaScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String!]

  """All values that are not contained in given list."""
  role_not_in: [String!]

  """All values less than the given value."""
  role_lt: String

  """All values less than or equal the given value."""
  role_lte: String

  """All values greater than the given value."""
  role_gt: String

  """All values greater than or equal the given value."""
  role_gte: String

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string."""
  role_not_ends_with: String
  responsibilities: String

  """All values that are not equal to given value."""
  responsibilities_not: String

  """All values that are contained in given list."""
  responsibilities_in: [String!]

  """All values that are not contained in given list."""
  responsibilities_not_in: [String!]

  """All values less than the given value."""
  responsibilities_lt: String

  """All values less than or equal the given value."""
  responsibilities_lte: String

  """All values greater than the given value."""
  responsibilities_gt: String

  """All values greater than or equal the given value."""
  responsibilities_gte: String

  """All values containing the given string."""
  responsibilities_contains: String

  """All values not containing the given string."""
  responsibilities_not_contains: String

  """All values starting with the given string."""
  responsibilities_starts_with: String

  """All values not starting with the given string."""
  responsibilities_not_starts_with: String

  """All values ending with the given string."""
  responsibilities_ends_with: String

  """All values not ending with the given string."""
  responsibilities_not_ends_with: String
  permissions: Permission

  """All values that are not equal to given value."""
  permissions_not: Permission

  """All values that are contained in given list."""
  permissions_in: [Permission!]

  """All values that are not contained in given list."""
  permissions_not_in: [Permission!]
}

type UserAreaSubscriptionPayload {
  mutation: MutationType!
  node: UserArea
  updatedFields: [String!]
  previousValues: UserAreaPreviousValues
}

input UserAreaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAreaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAreaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAreaSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserAreaWhereInput
}

input UserAreaUpdateInput {
  role: String
  responsibilities: String
  permissions: Permission
  user: UserUpdateOneRequiredWithoutAreasInput
  area: AreaUpdateOneRequiredInput
}

input UserAreaUpdateManyDataInput {
  role: String
  responsibilities: String
  permissions: Permission
}

input UserAreaUpdateManyMutationInput {
  role: String
  responsibilities: String
  permissions: Permission
}

input UserAreaUpdateManyWithoutUserInput {
  create: [UserAreaCreateWithoutUserInput!]
  connect: [UserAreaWhereUniqueInput!]
  set: [UserAreaWhereUniqueInput!]
  disconnect: [UserAreaWhereUniqueInput!]
  delete: [UserAreaWhereUniqueInput!]
  update: [UserAreaUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserAreaUpdateManyWithWhereNestedInput!]
  deleteMany: [UserAreaScalarWhereInput!]
  upsert: [UserAreaUpsertWithWhereUniqueWithoutUserInput!]
}

input UserAreaUpdateManyWithWhereNestedInput {
  where: UserAreaScalarWhereInput!
  data: UserAreaUpdateManyDataInput!
}

input UserAreaUpdateWithoutUserDataInput {
  role: String
  responsibilities: String
  permissions: Permission
  area: AreaUpdateOneRequiredInput
}

input UserAreaUpdateWithWhereUniqueWithoutUserInput {
  where: UserAreaWhereUniqueInput!
  data: UserAreaUpdateWithoutUserDataInput!
}

input UserAreaUpsertWithWhereUniqueWithoutUserInput {
  where: UserAreaWhereUniqueInput!
  update: UserAreaUpdateWithoutUserDataInput!
  create: UserAreaCreateWithoutUserInput!
}

input UserAreaWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAreaWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAreaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAreaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String!]

  """All values that are not contained in given list."""
  role_not_in: [String!]

  """All values less than the given value."""
  role_lt: String

  """All values less than or equal the given value."""
  role_lte: String

  """All values greater than the given value."""
  role_gt: String

  """All values greater than or equal the given value."""
  role_gte: String

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string."""
  role_not_ends_with: String
  responsibilities: String

  """All values that are not equal to given value."""
  responsibilities_not: String

  """All values that are contained in given list."""
  responsibilities_in: [String!]

  """All values that are not contained in given list."""
  responsibilities_not_in: [String!]

  """All values less than the given value."""
  responsibilities_lt: String

  """All values less than or equal the given value."""
  responsibilities_lte: String

  """All values greater than the given value."""
  responsibilities_gt: String

  """All values greater than or equal the given value."""
  responsibilities_gte: String

  """All values containing the given string."""
  responsibilities_contains: String

  """All values not containing the given string."""
  responsibilities_not_contains: String

  """All values starting with the given string."""
  responsibilities_starts_with: String

  """All values not starting with the given string."""
  responsibilities_not_starts_with: String

  """All values ending with the given string."""
  responsibilities_ends_with: String

  """All values not ending with the given string."""
  responsibilities_not_ends_with: String
  permissions: Permission

  """All values that are not equal to given value."""
  permissions_not: Permission

  """All values that are contained in given list."""
  permissions_in: [Permission!]

  """All values that are not contained in given list."""
  permissions_not_in: [Permission!]
  user: UserWhereInput
  area: AreaWhereInput
}

input UserAreaWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateaccessesInput {
  set: [Access!]
}

input UserCreateInput {
  id: ID
  fullName: String!
  profileURL: String!
  image: String!
  email: String!
  companyEmail: String
  phone: String
  password: String!
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserCreatepermissionsInput
  institution: UserCreateinstitutionInput
  accesses: UserCreateaccessesInput
  special: UserCreatespecialInput
  areas: UserAreaCreateManyWithoutUserInput
  skills: UserSkillCreateManyWithoutUserInput
  projects: UserProjectCreateManyWithoutUserInput
  university: UniversityCreateOneWithoutUsersInput
}

input UserCreateinstitutionInput {
  set: [Institution!]
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUniversityInput {
  create: [UserCreateWithoutUniversityInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAreasInput {
  create: UserCreateWithoutAreasInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSkillsInput {
  create: UserCreateWithoutSkillsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [MainPermission!]
}

input UserCreatespecialInput {
  set: [String!]
}

input UserCreateWithoutAreasInput {
  id: ID
  fullName: String!
  profileURL: String!
  image: String!
  email: String!
  companyEmail: String
  phone: String
  password: String!
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserCreatepermissionsInput
  institution: UserCreateinstitutionInput
  accesses: UserCreateaccessesInput
  special: UserCreatespecialInput
  skills: UserSkillCreateManyWithoutUserInput
  projects: UserProjectCreateManyWithoutUserInput
  university: UniversityCreateOneWithoutUsersInput
}

input UserCreateWithoutProjectsInput {
  id: ID
  fullName: String!
  profileURL: String!
  image: String!
  email: String!
  companyEmail: String
  phone: String
  password: String!
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserCreatepermissionsInput
  institution: UserCreateinstitutionInput
  accesses: UserCreateaccessesInput
  special: UserCreatespecialInput
  areas: UserAreaCreateManyWithoutUserInput
  skills: UserSkillCreateManyWithoutUserInput
  university: UniversityCreateOneWithoutUsersInput
}

input UserCreateWithoutSkillsInput {
  id: ID
  fullName: String!
  profileURL: String!
  image: String!
  email: String!
  companyEmail: String
  phone: String
  password: String!
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserCreatepermissionsInput
  institution: UserCreateinstitutionInput
  accesses: UserCreateaccessesInput
  special: UserCreatespecialInput
  areas: UserAreaCreateManyWithoutUserInput
  projects: UserProjectCreateManyWithoutUserInput
  university: UniversityCreateOneWithoutUsersInput
}

input UserCreateWithoutUniversityInput {
  id: ID
  fullName: String!
  profileURL: String!
  image: String!
  email: String!
  companyEmail: String
  phone: String
  password: String!
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserCreatepermissionsInput
  institution: UserCreateinstitutionInput
  accesses: UserCreateaccessesInput
  special: UserCreatespecialInput
  areas: UserAreaCreateManyWithoutUserInput
  skills: UserSkillCreateManyWithoutUserInput
  projects: UserProjectCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  fullName_ASC
  fullName_DESC
  profileURL_ASC
  profileURL_DESC
  image_ASC
  image_DESC
  email_ASC
  email_DESC
  companyEmail_ASC
  companyEmail_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  universityDepartment_ASC
  universityDepartment_DESC
  fieldOfStudy_ASC
  fieldOfStudy_DESC
  year_ASC
  year_DESC
  indexNumber_ASC
  indexNumber_DESC
  slackId_ASC
  slackId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  fullName: String!
  profileURL: String!
  image: String!
  email: String!
  companyEmail: String
  phone: String
  password: String!
  role: String!
  permissions: [MainPermission!]!
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  institution: [Institution!]!
  slackId: String
  accesses: [Access!]!
  special: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserProject implements Node {
  id: ID!
  user: User!
  project: Project!
  role: String
  responsibilities: String
  permissions: Permission!
}

"""A connection to a list of items."""
type UserProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserProjectEdge]!
  aggregate: AggregateUserProject!
}

input UserProjectCreateInput {
  id: ID
  role: String
  responsibilities: String
  permissions: Permission!
  user: UserCreateOneWithoutProjectsInput!
  project: ProjectCreateOneInput!
}

input UserProjectCreateManyWithoutUserInput {
  create: [UserProjectCreateWithoutUserInput!]
  connect: [UserProjectWhereUniqueInput!]
}

input UserProjectCreateWithoutUserInput {
  id: ID
  role: String
  responsibilities: String
  permissions: Permission!
  project: ProjectCreateOneInput!
}

"""An edge in a connection."""
type UserProjectEdge {
  """The item at the end of the edge."""
  node: UserProject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserProjectOrderByInput {
  id_ASC
  id_DESC
  role_ASC
  role_DESC
  responsibilities_ASC
  responsibilities_DESC
  permissions_ASC
  permissions_DESC
}

type UserProjectPreviousValues {
  id: ID!
  role: String
  responsibilities: String
  permissions: Permission!
}

input UserProjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserProjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserProjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserProjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String!]

  """All values that are not contained in given list."""
  role_not_in: [String!]

  """All values less than the given value."""
  role_lt: String

  """All values less than or equal the given value."""
  role_lte: String

  """All values greater than the given value."""
  role_gt: String

  """All values greater than or equal the given value."""
  role_gte: String

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string."""
  role_not_ends_with: String
  responsibilities: String

  """All values that are not equal to given value."""
  responsibilities_not: String

  """All values that are contained in given list."""
  responsibilities_in: [String!]

  """All values that are not contained in given list."""
  responsibilities_not_in: [String!]

  """All values less than the given value."""
  responsibilities_lt: String

  """All values less than or equal the given value."""
  responsibilities_lte: String

  """All values greater than the given value."""
  responsibilities_gt: String

  """All values greater than or equal the given value."""
  responsibilities_gte: String

  """All values containing the given string."""
  responsibilities_contains: String

  """All values not containing the given string."""
  responsibilities_not_contains: String

  """All values starting with the given string."""
  responsibilities_starts_with: String

  """All values not starting with the given string."""
  responsibilities_not_starts_with: String

  """All values ending with the given string."""
  responsibilities_ends_with: String

  """All values not ending with the given string."""
  responsibilities_not_ends_with: String
  permissions: Permission

  """All values that are not equal to given value."""
  permissions_not: Permission

  """All values that are contained in given list."""
  permissions_in: [Permission!]

  """All values that are not contained in given list."""
  permissions_not_in: [Permission!]
}

type UserProjectSubscriptionPayload {
  mutation: MutationType!
  node: UserProject
  updatedFields: [String!]
  previousValues: UserProjectPreviousValues
}

input UserProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserProjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserProjectWhereInput
}

input UserProjectUpdateInput {
  role: String
  responsibilities: String
  permissions: Permission
  user: UserUpdateOneRequiredWithoutProjectsInput
  project: ProjectUpdateOneRequiredInput
}

input UserProjectUpdateManyDataInput {
  role: String
  responsibilities: String
  permissions: Permission
}

input UserProjectUpdateManyMutationInput {
  role: String
  responsibilities: String
  permissions: Permission
}

input UserProjectUpdateManyWithoutUserInput {
  create: [UserProjectCreateWithoutUserInput!]
  connect: [UserProjectWhereUniqueInput!]
  set: [UserProjectWhereUniqueInput!]
  disconnect: [UserProjectWhereUniqueInput!]
  delete: [UserProjectWhereUniqueInput!]
  update: [UserProjectUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserProjectUpdateManyWithWhereNestedInput!]
  deleteMany: [UserProjectScalarWhereInput!]
  upsert: [UserProjectUpsertWithWhereUniqueWithoutUserInput!]
}

input UserProjectUpdateManyWithWhereNestedInput {
  where: UserProjectScalarWhereInput!
  data: UserProjectUpdateManyDataInput!
}

input UserProjectUpdateWithoutUserDataInput {
  role: String
  responsibilities: String
  permissions: Permission
  project: ProjectUpdateOneRequiredInput
}

input UserProjectUpdateWithWhereUniqueWithoutUserInput {
  where: UserProjectWhereUniqueInput!
  data: UserProjectUpdateWithoutUserDataInput!
}

input UserProjectUpsertWithWhereUniqueWithoutUserInput {
  where: UserProjectWhereUniqueInput!
  update: UserProjectUpdateWithoutUserDataInput!
  create: UserProjectCreateWithoutUserInput!
}

input UserProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [UserProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String!]

  """All values that are not contained in given list."""
  role_not_in: [String!]

  """All values less than the given value."""
  role_lt: String

  """All values less than or equal the given value."""
  role_lte: String

  """All values greater than the given value."""
  role_gt: String

  """All values greater than or equal the given value."""
  role_gte: String

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string."""
  role_not_ends_with: String
  responsibilities: String

  """All values that are not equal to given value."""
  responsibilities_not: String

  """All values that are contained in given list."""
  responsibilities_in: [String!]

  """All values that are not contained in given list."""
  responsibilities_not_in: [String!]

  """All values less than the given value."""
  responsibilities_lt: String

  """All values less than or equal the given value."""
  responsibilities_lte: String

  """All values greater than the given value."""
  responsibilities_gt: String

  """All values greater than or equal the given value."""
  responsibilities_gte: String

  """All values containing the given string."""
  responsibilities_contains: String

  """All values not containing the given string."""
  responsibilities_not_contains: String

  """All values starting with the given string."""
  responsibilities_starts_with: String

  """All values not starting with the given string."""
  responsibilities_not_starts_with: String

  """All values ending with the given string."""
  responsibilities_ends_with: String

  """All values not ending with the given string."""
  responsibilities_not_ends_with: String
  permissions: Permission

  """All values that are not equal to given value."""
  permissions_not: Permission

  """All values that are contained in given list."""
  permissions_in: [Permission!]

  """All values that are not contained in given list."""
  permissions_not_in: [Permission!]
  user: UserWhereInput
  project: ProjectWhereInput
}

input UserProjectWhereUniqueInput {
  id: ID
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  profileURL: String

  """All values that are not equal to given value."""
  profileURL_not: String

  """All values that are contained in given list."""
  profileURL_in: [String!]

  """All values that are not contained in given list."""
  profileURL_not_in: [String!]

  """All values less than the given value."""
  profileURL_lt: String

  """All values less than or equal the given value."""
  profileURL_lte: String

  """All values greater than the given value."""
  profileURL_gt: String

  """All values greater than or equal the given value."""
  profileURL_gte: String

  """All values containing the given string."""
  profileURL_contains: String

  """All values not containing the given string."""
  profileURL_not_contains: String

  """All values starting with the given string."""
  profileURL_starts_with: String

  """All values not starting with the given string."""
  profileURL_not_starts_with: String

  """All values ending with the given string."""
  profileURL_ends_with: String

  """All values not ending with the given string."""
  profileURL_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  companyEmail: String

  """All values that are not equal to given value."""
  companyEmail_not: String

  """All values that are contained in given list."""
  companyEmail_in: [String!]

  """All values that are not contained in given list."""
  companyEmail_not_in: [String!]

  """All values less than the given value."""
  companyEmail_lt: String

  """All values less than or equal the given value."""
  companyEmail_lte: String

  """All values greater than the given value."""
  companyEmail_gt: String

  """All values greater than or equal the given value."""
  companyEmail_gte: String

  """All values containing the given string."""
  companyEmail_contains: String

  """All values not containing the given string."""
  companyEmail_not_contains: String

  """All values starting with the given string."""
  companyEmail_starts_with: String

  """All values not starting with the given string."""
  companyEmail_not_starts_with: String

  """All values ending with the given string."""
  companyEmail_ends_with: String

  """All values not ending with the given string."""
  companyEmail_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String!]

  """All values that are not contained in given list."""
  role_not_in: [String!]

  """All values less than the given value."""
  role_lt: String

  """All values less than or equal the given value."""
  role_lte: String

  """All values greater than the given value."""
  role_gt: String

  """All values greater than or equal the given value."""
  role_gte: String

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string."""
  role_not_ends_with: String
  universityDepartment: String

  """All values that are not equal to given value."""
  universityDepartment_not: String

  """All values that are contained in given list."""
  universityDepartment_in: [String!]

  """All values that are not contained in given list."""
  universityDepartment_not_in: [String!]

  """All values less than the given value."""
  universityDepartment_lt: String

  """All values less than or equal the given value."""
  universityDepartment_lte: String

  """All values greater than the given value."""
  universityDepartment_gt: String

  """All values greater than or equal the given value."""
  universityDepartment_gte: String

  """All values containing the given string."""
  universityDepartment_contains: String

  """All values not containing the given string."""
  universityDepartment_not_contains: String

  """All values starting with the given string."""
  universityDepartment_starts_with: String

  """All values not starting with the given string."""
  universityDepartment_not_starts_with: String

  """All values ending with the given string."""
  universityDepartment_ends_with: String

  """All values not ending with the given string."""
  universityDepartment_not_ends_with: String
  fieldOfStudy: String

  """All values that are not equal to given value."""
  fieldOfStudy_not: String

  """All values that are contained in given list."""
  fieldOfStudy_in: [String!]

  """All values that are not contained in given list."""
  fieldOfStudy_not_in: [String!]

  """All values less than the given value."""
  fieldOfStudy_lt: String

  """All values less than or equal the given value."""
  fieldOfStudy_lte: String

  """All values greater than the given value."""
  fieldOfStudy_gt: String

  """All values greater than or equal the given value."""
  fieldOfStudy_gte: String

  """All values containing the given string."""
  fieldOfStudy_contains: String

  """All values not containing the given string."""
  fieldOfStudy_not_contains: String

  """All values starting with the given string."""
  fieldOfStudy_starts_with: String

  """All values not starting with the given string."""
  fieldOfStudy_not_starts_with: String

  """All values ending with the given string."""
  fieldOfStudy_ends_with: String

  """All values not ending with the given string."""
  fieldOfStudy_not_ends_with: String
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  indexNumber: Int

  """All values that are not equal to given value."""
  indexNumber_not: Int

  """All values that are contained in given list."""
  indexNumber_in: [Int!]

  """All values that are not contained in given list."""
  indexNumber_not_in: [Int!]

  """All values less than the given value."""
  indexNumber_lt: Int

  """All values less than or equal the given value."""
  indexNumber_lte: Int

  """All values greater than the given value."""
  indexNumber_gt: Int

  """All values greater than or equal the given value."""
  indexNumber_gte: Int
  slackId: String

  """All values that are not equal to given value."""
  slackId_not: String

  """All values that are contained in given list."""
  slackId_in: [String!]

  """All values that are not contained in given list."""
  slackId_not_in: [String!]

  """All values less than the given value."""
  slackId_lt: String

  """All values less than or equal the given value."""
  slackId_lte: String

  """All values greater than the given value."""
  slackId_gt: String

  """All values greater than or equal the given value."""
  slackId_gte: String

  """All values containing the given string."""
  slackId_contains: String

  """All values not containing the given string."""
  slackId_not_contains: String

  """All values starting with the given string."""
  slackId_starts_with: String

  """All values not starting with the given string."""
  slackId_not_starts_with: String

  """All values ending with the given string."""
  slackId_ends_with: String

  """All values not ending with the given string."""
  slackId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserSkill implements Node {
  id: ID!
  skill: Skill!
  user: User!
  level: Int
}

"""A connection to a list of items."""
type UserSkillConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserSkillEdge]!
  aggregate: AggregateUserSkill!
}

input UserSkillCreateInput {
  id: ID
  level: Int
  skill: SkillCreateOneInput!
  user: UserCreateOneWithoutSkillsInput!
}

input UserSkillCreateManyWithoutUserInput {
  create: [UserSkillCreateWithoutUserInput!]
  connect: [UserSkillWhereUniqueInput!]
}

input UserSkillCreateWithoutUserInput {
  id: ID
  level: Int
  skill: SkillCreateOneInput!
}

"""An edge in a connection."""
type UserSkillEdge {
  """The item at the end of the edge."""
  node: UserSkill!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserSkillOrderByInput {
  id_ASC
  id_DESC
  level_ASC
  level_DESC
}

type UserSkillPreviousValues {
  id: ID!
  level: Int
}

input UserSkillScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSkillScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSkillScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSkillScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
}

type UserSkillSubscriptionPayload {
  mutation: MutationType!
  node: UserSkill
  updatedFields: [String!]
  previousValues: UserSkillPreviousValues
}

input UserSkillSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSkillSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSkillSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSkillSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserSkillWhereInput
}

input UserSkillUpdateInput {
  level: Int
  skill: SkillUpdateOneRequiredInput
  user: UserUpdateOneRequiredWithoutSkillsInput
}

input UserSkillUpdateManyDataInput {
  level: Int
}

input UserSkillUpdateManyMutationInput {
  level: Int
}

input UserSkillUpdateManyWithoutUserInput {
  create: [UserSkillCreateWithoutUserInput!]
  connect: [UserSkillWhereUniqueInput!]
  set: [UserSkillWhereUniqueInput!]
  disconnect: [UserSkillWhereUniqueInput!]
  delete: [UserSkillWhereUniqueInput!]
  update: [UserSkillUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserSkillUpdateManyWithWhereNestedInput!]
  deleteMany: [UserSkillScalarWhereInput!]
  upsert: [UserSkillUpsertWithWhereUniqueWithoutUserInput!]
}

input UserSkillUpdateManyWithWhereNestedInput {
  where: UserSkillScalarWhereInput!
  data: UserSkillUpdateManyDataInput!
}

input UserSkillUpdateWithoutUserDataInput {
  level: Int
  skill: SkillUpdateOneRequiredInput
}

input UserSkillUpdateWithWhereUniqueWithoutUserInput {
  where: UserSkillWhereUniqueInput!
  data: UserSkillUpdateWithoutUserDataInput!
}

input UserSkillUpsertWithWhereUniqueWithoutUserInput {
  where: UserSkillWhereUniqueInput!
  update: UserSkillUpdateWithoutUserDataInput!
  create: UserSkillCreateWithoutUserInput!
}

input UserSkillWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSkillWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSkillWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSkillWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: Int

  """All values that are not equal to given value."""
  level_not: Int

  """All values that are contained in given list."""
  level_in: [Int!]

  """All values that are not contained in given list."""
  level_not_in: [Int!]

  """All values less than the given value."""
  level_lt: Int

  """All values less than or equal the given value."""
  level_lte: Int

  """All values greater than the given value."""
  level_gt: Int

  """All values greater than or equal the given value."""
  level_gte: Int
  skill: SkillWhereInput
  user: UserWhereInput
}

input UserSkillWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateaccessesInput {
  set: [Access!]
}

input UserUpdateDataInput {
  fullName: String
  profileURL: String
  image: String
  email: String
  companyEmail: String
  phone: String
  password: String
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserUpdatepermissionsInput
  institution: UserUpdateinstitutionInput
  accesses: UserUpdateaccessesInput
  special: UserUpdatespecialInput
  areas: UserAreaUpdateManyWithoutUserInput
  skills: UserSkillUpdateManyWithoutUserInput
  projects: UserProjectUpdateManyWithoutUserInput
  university: UniversityUpdateOneWithoutUsersInput
}

input UserUpdateInput {
  fullName: String
  profileURL: String
  image: String
  email: String
  companyEmail: String
  phone: String
  password: String
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserUpdatepermissionsInput
  institution: UserUpdateinstitutionInput
  accesses: UserUpdateaccessesInput
  special: UserUpdatespecialInput
  areas: UserAreaUpdateManyWithoutUserInput
  skills: UserSkillUpdateManyWithoutUserInput
  projects: UserProjectUpdateManyWithoutUserInput
  university: UniversityUpdateOneWithoutUsersInput
}

input UserUpdateinstitutionInput {
  set: [Institution!]
}

input UserUpdateManyDataInput {
  fullName: String
  profileURL: String
  image: String
  email: String
  companyEmail: String
  phone: String
  password: String
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserUpdatepermissionsInput
  institution: UserUpdateinstitutionInput
  accesses: UserUpdateaccessesInput
  special: UserUpdatespecialInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  fullName: String
  profileURL: String
  image: String
  email: String
  companyEmail: String
  phone: String
  password: String
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserUpdatepermissionsInput
  institution: UserUpdateinstitutionInput
  accesses: UserUpdateaccessesInput
  special: UserUpdatespecialInput
}

input UserUpdateManyWithoutUniversityInput {
  create: [UserCreateWithoutUniversityInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUniversityInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUniversityInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutAreasInput {
  create: UserCreateWithoutAreasInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAreasDataInput
  upsert: UserUpsertWithoutAreasInput
}

input UserUpdateOneRequiredWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateOneRequiredWithoutSkillsInput {
  create: UserCreateWithoutSkillsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSkillsDataInput
  upsert: UserUpsertWithoutSkillsInput
}

input UserUpdatepermissionsInput {
  set: [MainPermission!]
}

input UserUpdatespecialInput {
  set: [String!]
}

input UserUpdateWithoutAreasDataInput {
  fullName: String
  profileURL: String
  image: String
  email: String
  companyEmail: String
  phone: String
  password: String
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserUpdatepermissionsInput
  institution: UserUpdateinstitutionInput
  accesses: UserUpdateaccessesInput
  special: UserUpdatespecialInput
  skills: UserSkillUpdateManyWithoutUserInput
  projects: UserProjectUpdateManyWithoutUserInput
  university: UniversityUpdateOneWithoutUsersInput
}

input UserUpdateWithoutProjectsDataInput {
  fullName: String
  profileURL: String
  image: String
  email: String
  companyEmail: String
  phone: String
  password: String
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserUpdatepermissionsInput
  institution: UserUpdateinstitutionInput
  accesses: UserUpdateaccessesInput
  special: UserUpdatespecialInput
  areas: UserAreaUpdateManyWithoutUserInput
  skills: UserSkillUpdateManyWithoutUserInput
  university: UniversityUpdateOneWithoutUsersInput
}

input UserUpdateWithoutSkillsDataInput {
  fullName: String
  profileURL: String
  image: String
  email: String
  companyEmail: String
  phone: String
  password: String
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserUpdatepermissionsInput
  institution: UserUpdateinstitutionInput
  accesses: UserUpdateaccessesInput
  special: UserUpdatespecialInput
  areas: UserAreaUpdateManyWithoutUserInput
  projects: UserProjectUpdateManyWithoutUserInput
  university: UniversityUpdateOneWithoutUsersInput
}

input UserUpdateWithoutUniversityDataInput {
  fullName: String
  profileURL: String
  image: String
  email: String
  companyEmail: String
  phone: String
  password: String
  role: String
  universityDepartment: String
  fieldOfStudy: String
  year: Int
  indexNumber: Int
  slackId: String
  permissions: UserUpdatepermissionsInput
  institution: UserUpdateinstitutionInput
  accesses: UserUpdateaccessesInput
  special: UserUpdatespecialInput
  areas: UserAreaUpdateManyWithoutUserInput
  skills: UserSkillUpdateManyWithoutUserInput
  projects: UserProjectUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutUniversityInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUniversityDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAreasInput {
  update: UserUpdateWithoutAreasDataInput!
  create: UserCreateWithoutAreasInput!
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserUpsertWithoutSkillsInput {
  update: UserUpdateWithoutSkillsDataInput!
  create: UserCreateWithoutSkillsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutUniversityInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUniversityDataInput!
  create: UserCreateWithoutUniversityInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  profileURL: String

  """All values that are not equal to given value."""
  profileURL_not: String

  """All values that are contained in given list."""
  profileURL_in: [String!]

  """All values that are not contained in given list."""
  profileURL_not_in: [String!]

  """All values less than the given value."""
  profileURL_lt: String

  """All values less than or equal the given value."""
  profileURL_lte: String

  """All values greater than the given value."""
  profileURL_gt: String

  """All values greater than or equal the given value."""
  profileURL_gte: String

  """All values containing the given string."""
  profileURL_contains: String

  """All values not containing the given string."""
  profileURL_not_contains: String

  """All values starting with the given string."""
  profileURL_starts_with: String

  """All values not starting with the given string."""
  profileURL_not_starts_with: String

  """All values ending with the given string."""
  profileURL_ends_with: String

  """All values not ending with the given string."""
  profileURL_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  companyEmail: String

  """All values that are not equal to given value."""
  companyEmail_not: String

  """All values that are contained in given list."""
  companyEmail_in: [String!]

  """All values that are not contained in given list."""
  companyEmail_not_in: [String!]

  """All values less than the given value."""
  companyEmail_lt: String

  """All values less than or equal the given value."""
  companyEmail_lte: String

  """All values greater than the given value."""
  companyEmail_gt: String

  """All values greater than or equal the given value."""
  companyEmail_gte: String

  """All values containing the given string."""
  companyEmail_contains: String

  """All values not containing the given string."""
  companyEmail_not_contains: String

  """All values starting with the given string."""
  companyEmail_starts_with: String

  """All values not starting with the given string."""
  companyEmail_not_starts_with: String

  """All values ending with the given string."""
  companyEmail_ends_with: String

  """All values not ending with the given string."""
  companyEmail_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  role: String

  """All values that are not equal to given value."""
  role_not: String

  """All values that are contained in given list."""
  role_in: [String!]

  """All values that are not contained in given list."""
  role_not_in: [String!]

  """All values less than the given value."""
  role_lt: String

  """All values less than or equal the given value."""
  role_lte: String

  """All values greater than the given value."""
  role_gt: String

  """All values greater than or equal the given value."""
  role_gte: String

  """All values containing the given string."""
  role_contains: String

  """All values not containing the given string."""
  role_not_contains: String

  """All values starting with the given string."""
  role_starts_with: String

  """All values not starting with the given string."""
  role_not_starts_with: String

  """All values ending with the given string."""
  role_ends_with: String

  """All values not ending with the given string."""
  role_not_ends_with: String
  universityDepartment: String

  """All values that are not equal to given value."""
  universityDepartment_not: String

  """All values that are contained in given list."""
  universityDepartment_in: [String!]

  """All values that are not contained in given list."""
  universityDepartment_not_in: [String!]

  """All values less than the given value."""
  universityDepartment_lt: String

  """All values less than or equal the given value."""
  universityDepartment_lte: String

  """All values greater than the given value."""
  universityDepartment_gt: String

  """All values greater than or equal the given value."""
  universityDepartment_gte: String

  """All values containing the given string."""
  universityDepartment_contains: String

  """All values not containing the given string."""
  universityDepartment_not_contains: String

  """All values starting with the given string."""
  universityDepartment_starts_with: String

  """All values not starting with the given string."""
  universityDepartment_not_starts_with: String

  """All values ending with the given string."""
  universityDepartment_ends_with: String

  """All values not ending with the given string."""
  universityDepartment_not_ends_with: String
  fieldOfStudy: String

  """All values that are not equal to given value."""
  fieldOfStudy_not: String

  """All values that are contained in given list."""
  fieldOfStudy_in: [String!]

  """All values that are not contained in given list."""
  fieldOfStudy_not_in: [String!]

  """All values less than the given value."""
  fieldOfStudy_lt: String

  """All values less than or equal the given value."""
  fieldOfStudy_lte: String

  """All values greater than the given value."""
  fieldOfStudy_gt: String

  """All values greater than or equal the given value."""
  fieldOfStudy_gte: String

  """All values containing the given string."""
  fieldOfStudy_contains: String

  """All values not containing the given string."""
  fieldOfStudy_not_contains: String

  """All values starting with the given string."""
  fieldOfStudy_starts_with: String

  """All values not starting with the given string."""
  fieldOfStudy_not_starts_with: String

  """All values ending with the given string."""
  fieldOfStudy_ends_with: String

  """All values not ending with the given string."""
  fieldOfStudy_not_ends_with: String
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  indexNumber: Int

  """All values that are not equal to given value."""
  indexNumber_not: Int

  """All values that are contained in given list."""
  indexNumber_in: [Int!]

  """All values that are not contained in given list."""
  indexNumber_not_in: [Int!]

  """All values less than the given value."""
  indexNumber_lt: Int

  """All values less than or equal the given value."""
  indexNumber_lte: Int

  """All values greater than the given value."""
  indexNumber_gt: Int

  """All values greater than or equal the given value."""
  indexNumber_gte: Int
  slackId: String

  """All values that are not equal to given value."""
  slackId_not: String

  """All values that are contained in given list."""
  slackId_in: [String!]

  """All values that are not contained in given list."""
  slackId_not_in: [String!]

  """All values less than the given value."""
  slackId_lt: String

  """All values less than or equal the given value."""
  slackId_lte: String

  """All values greater than the given value."""
  slackId_gt: String

  """All values greater than or equal the given value."""
  slackId_gte: String

  """All values containing the given string."""
  slackId_contains: String

  """All values not containing the given string."""
  slackId_not_contains: String

  """All values starting with the given string."""
  slackId_starts_with: String

  """All values not starting with the given string."""
  slackId_not_starts_with: String

  """All values ending with the given string."""
  slackId_ends_with: String

  """All values not ending with the given string."""
  slackId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  areas_every: UserAreaWhereInput
  areas_some: UserAreaWhereInput
  areas_none: UserAreaWhereInput
  skills_every: UserSkillWhereInput
  skills_some: UserSkillWhereInput
  skills_none: UserSkillWhereInput
  projects_every: UserProjectWhereInput
  projects_some: UserProjectWhereInput
  projects_none: UserProjectWhereInput
  university: UniversityWhereInput
}

input UserWhereUniqueInput {
  id: ID
  profileURL: String
  email: String
  indexNumber: Int
  slackId: String
}
