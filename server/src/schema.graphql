# import * from './generated/prisma.graphql'

type Message {
  message: String
}

input UpdateMySkillsInput {
  id: String
  skill: SkillCreateInput
  level: Int!
}

type Mutation {
  signIn(email: String!, password: String!): User!
  signOut: Message

  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUser(where: UserWhereUniqueInput!): User
  updateProfile(data: UserUpdateInput!): User

  createUniversity(data: UniversityCreateInput!): University!
  updateUniversity(data: UniversityUpdateInput!, where: UniversityWhereUniqueInput!): University
  deleteUniversity(where: UniversityWhereUniqueInput!): University
  addUserToUniversity(userId: ID!, universityId: ID!): University!

  createSuccess(data: SuccessCreateInput!): Success!
  updateSuccess(data: SuccessUpdateInput!, where: SuccessWhereUniqueInput!): Success
  deleteSuccess(where: SuccessWhereUniqueInput!): Success

  createSkill(data: SkillCreateInput!): Skill!
  updateSkill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  updateMySkills(data: [UpdateMySkillsInput!]!): [UserSkill]!

  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  deleteProject(where: ProjectWhereUniqueInput!): Project
  createProjectMember(data: ProjectMemberCreateInput!): ProjectMember!
  updateProjectMember(data: ProjectMemberUpdateInput!, where: ProjectMemberWhereUniqueInput!): ProjectMember
  deleteProjectMember(where: ProjectMemberWhereUniqueInput!): ProjectMember

  createArea(data: AreaCreateInput!): Area!
  updateArea(data: AreaUpdateInput!, where: AreaWhereUniqueInput!): Area
  deleteArea(where: AreaWhereUniqueInput!): Area
  createAreaMember(data: AreaMemberCreateInput!): AreaMember!
  updateAreaMember(data: AreaMemberUpdateInput!, where: AreaMemberWhereUniqueInput!): AreaMember
  deleteAreaMember(where: AreaMemberWhereUniqueInput!): AreaMember

  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  deleteEvent(where: EventWhereUniqueInput!): Event

  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deletePost(where: PostWhereUniqueInput!): Post

  createMaterial(data: MaterialCreateInput!): Material!
  updateMaterial(data: MaterialUpdateInput!, where: MaterialWhereUniqueInput!): Material
  deleteMaterial(where: MaterialWhereUniqueInput!): Material
  createMaterialTag(data: MaterialTagCreateInput!): MaterialTag!
  updateMaterialTag(data: MaterialTagUpdateInput!, where: MaterialTagWhereUniqueInput!): MaterialTag
  deleteMaterialTag(where: MaterialTagWhereUniqueInput!): MaterialTag

  createCredential(data: CredentialCreateInput!): Credential!
  updateCredential(data: CredentialUpdateInput!, where: CredentialWhereUniqueInput!): Credential
  deleteCredential(where: CredentialWhereUniqueInput!): Credential
}

type Query {
  me: User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  user(where: UserWhereUniqueInput!): User

  universities(where: UniversityWhereInput, orderBy: UniversityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [University]!

  successes(where: SuccessWhereInput, orderBy: SuccessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Success]!

  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill]!
  mySkills: [UserSkill]!

  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  project(where: ProjectWhereUniqueInput!): Project

  areas(where: AreaWhereInput, orderBy: AreaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Area]!
  area(where: AreaWhereUniqueInput!): Area

  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!

  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!

  materials(where: MaterialWhereInput, orderBy: MaterialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Material]!
  materialTags(where: MaterialTagWhereInput, orderBy: MaterialTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MaterialTag]!

  credentials(where: CredentialWhereInput, orderBy: CredentialOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Credential]!
}
